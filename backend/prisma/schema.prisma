// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  //  output        = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//the user data, including hashed password, and another table with OTP data
model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String
  email         String   @unique
  emailVerified Boolean  @default(false)
  mfaInUse      Boolean  @default(false)
  OTP           Otp[]
  isActivated   Boolean  @default(false)
  language      String   @default("en")
  wins          Int      @default(0)
  losses        Int      @default(0)
  played        Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profilePic    String?
  isOnline      Boolean  @default(false)
  tournamentWins Int     @default(0)

  matchesAsPlayer   Match[] @relation("PlayerMatches")
  matchesAsOpponent Match[] @relation("OpponentMatches")

  sentFriendRequests     FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")

  friends  User[] @relation("UserFriends") // Cascadng deletion not supported: needs manual deletion!!!
  friendOf User[] @relation("UserFriends") // Cascadng deletion not supported: needs manual deletion!!!

  tournamentsCreated       Tournament[]            @relation("CreatedTournaments")
  tournamentParticipations TournamentParticipant[]

  //had to be added as relation to the tournament, might be redundant
  tournamentMatchesAsPlayer1 TournamentMatch[] @relation("TM_Player1")
  tournamentMatchesAsPlayer2 TournamentMatch[] @relation("TM_Player2")
  tournamentMatchesAsWinner  TournamentMatch[] @relation("TM_Winner")
  
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// added onDelete: Cascade, so the OTP gets deleted automatically with the user

model Match {
  id         Int      @id @default(autoincrement())
  playerId   Int
  opponentId Int
  result     String // "win" or "loss"
  date       DateTime @default(now())

  player   User @relation("PlayerMatches", fields: [playerId], references: [id], onDelete: Cascade)
  opponent User @relation("OpponentMatches", fields: [opponentId], references: [id], onDelete: Cascade)

  //tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  //tournamentId Int?
}

// what happens to a match data if one of the players who participated in the game gets deleted?

model FriendRequest {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int
  status     String   @default("pending") // could be "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
}

//Tournament models

model Tournament {
  id                Int                     @id @default(autoincrement())
  name              String
  size              Int
  createdById       Int?
  createdBy         User?                   @relation("CreatedTournaments", fields: [createdById], references: [id])
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  tournamentMatches TournamentMatch[]
  participants      TournamentParticipant[]
  winnerId          Int?
  winnerAlias       String?
  status            String // "waiting" | "in_progress" | "finished"
}

model TournamentParticipant {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  alias        String? // for guests
  joinedAt     DateTime   @default(now())
}

model TournamentMatch {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int

  round Int

  player1Id    Int?
  player1      User?   @relation("TM_Player1", fields: [player1Id], references: [id])
  player1Alias String? // <â€“ For guests

  player2Id    Int?
  player2      User?   @relation("TM_Player2", fields: [player2Id], references: [id])
  player2Alias String?

  winnerId    Int?
  winner      User?   @relation("TM_Winner", fields: [winnerId], references: [id])
  winnerAlias String?

  status    String    @default("pending")
  startedAt DateTime?
  endedAt   DateTime?
}